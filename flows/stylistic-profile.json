{
	"name": "Stylistic profile",
	"authors": "Eugenia Kelbert & Sasha Mile Rudan",
	"version": "0.1",
	"description": "",

	"data": [
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>",
			"name": "plain",
			"params": {
				"fileIn.name":  "<FOLDER_IN>/<SUB_PROJECT_NAME> - document.txt",
				"fileIn.type":  "text",
				"fileIn.encoding": "utf-8"
			},
			"paramsProcess": {
				"fileIn.name":  "E"
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>",
			"name": "imported"
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.import",
			"name": "importing-the-corpus",
			"comment": "Importing the corpus as raw text",
			"processorNsN": "importers.ImporterText.ImporterText",
			"execution": 0,
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"name": "plain",
							"namespace": "<NAMESPACE_DATA>"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "imported"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>",
			"name": "parsed"
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.parsers",
			"name": "words",
			"comment": "Parsing raw text and producing 3 outputs: words, sentences, and paragraphs",
			"processorNsN": "parsers.SplitRawIntoWords.SplitRawIntoWords",
			"execution": 0,
			"params": {
				"paragraphs.separators":  ["[\\r\\n]+\\s\\s\\s\\s\\s"]
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "imported"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "parsed"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "data-pure",
			"shouldInvalidate": false
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.pos",
			"name": "parsing-pos-external",
			"comment": "Parsing(-external) paragraphs and producing POS (Part Of Speach) tagged paragraphs",
			"processorNsN": "pos.TaggerExternal.TaggerExternal",
			"execution": 0,
			"paramsProcess": {
				"path":  "E",
				"cmd":  "E"
			},
			"params": {
				"path": "<TREE_TAGGER_PATH>",
				"cmd": "<TREE_TAGGER_CMD_ENGLISH>"
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "parsed"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data-pure"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "data",
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.pos",
			"name": "remapping-pos-tags",
			"comment": "Remapping POS (Part Of Speach) tags into general tagset",
			"processorNsN": "pos.TagsetMapping.TagsetMapping",
			"execution": 0,
			"paramsProcess": {
				"fileIn.name":  "E",
				"fileOut.name":  "E"
			},
			"params": {
				"fileIn.name": "<FOLDER_IN>/tagset mapping.json",
				"fileIn.type": "json",
				"fileIn.encoding": "utf-8",
				"fileOut.name": "<FOLDER_OUT>/<SUB_PROJECT_NAME> - tagset mapping - report.html",
				"fileOut.type": ["html"],
				"language": "english"
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data-pure"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "corpora.brown.words",
			"name": "distribution",
			"dataParams": {
				"type": "bukvik.structure.word.Distribution",
				"structure": "array"
			}
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.corpora.brown.words.distribution",
			"name": "generating-brown-list-of-words-distribution",
			"comment": "distribution of words in the Brown list will be used to remove most occurring words and removing noise",
			"processorNsN": "corpora.Corpora.Corpora",
			"execution": 0,
			"params": {
				"corpus.name":  "brown",
				"output.form":  "dictionary"
			},
			"ports": {
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "corpora.brown.words",
							"name": "distribution"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.stats",
			"name": "results",
			"paramsProcess": {
				"fileOut.name":  "E"
			},
			"params": {
				"fileOut.name": "<FOLDER_OUT>/<SUB_PROJECT_NAME> - stats results.html",
				"fileOut.type": "html",
				"fileOut.encoding": "utf-8",
				"subNamespaces": {
					"sentenceLength": {
						"item.iterateType": 3,
						"item.countType": 3,
						"skipSmallParagraphs": false,
						"examples.store": false
					},
					"paragraphLengthInSentences": {
						"item.iterateType": 2,
						"item.countType": 2,
						"skipSmallParagraphs": false,
						"examples.store": false
					},
					"paragraphLengthInWords": {
						"item.iterateType": 2,
						"item.countType": 2,
						"skipSmallParagraphs": false,
						"examples.store": false
					},
					"richnessByLemmas": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": false
					},
					"richnessByWords": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipSmallParagraphs": false,
						"examples.store": false
					},
					"exoticismByLemmas": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					}
				}
			},
			"shouldInvalidate": false,
			"cacheAsJson": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.stats",
			"name": "calculating-simple-stats",
			"comment": "Calculating simple statistics (sentence and paragraph length, etc)",
			"processorNsN": "distributions.SimpleStats.SimpleStats",
			"forceExecute": false,
			"execution": 0,
			"params": {
				"examples.store": true,
				"examples.storeNo": true,
				"examples.ShowNum": 300,
				"results.namespace": "SimpleStats"
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data"
						}
					]
				},
				"corpus": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "corpora.brown.words",
							"name": "distribution"
						}
					]
				},
				"inout": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.stats",
							"name": "results"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "dictionary.etymology.wiktionary",
			"name": "deep-partial",
			"paramsProcess": {
			},
			"params": {
			},
			"shouldInvalidate": false
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.stats",
			"name": "calculating-etymology",
			"comment": "Calculating etymology statistics",
			"processorNsN": "wordnet.EtymologyCalculate.EtymologyCalculate",
			"forceExecute": false,
			"execution": 0,
			"params": {
				"examples.store": true,
				"examples.storeNo": true,
				"examples.ShowNum": 300,
				"results.namespace": "etymologyUnique",
				"skip.prefixes": true,
				"skip.sufixes": false,
				"documentLanguage": "english",
				"languages.support": {
					"english": [
						"aig \tAntigua and Barbuda Creole English \tCreole English, Antigua and Barbuda",
						"ang \tOld English (ca. 450-1100) \tEnglish, Old (ca. 450-1100)",
						"bah \tBahamas Creole English \tCreole English, Bahamas",
						"bzj \tBelize Kriol English \tKriol English, Belize",
						"bzk \tNicaragua Creole English \tCreole English, Nicaragua",
						"cpi \tChinese Pidgin English \tPidgin English, Chinese",
						"eng \tEnglish \tEnglish",
						"enm \tMiddle English (1100-1500) \tEnglish, Middle (1100-1500)",
						"fpe \tFernando Po Creole English \tCreole English, Fernando Po",
						"gcl \tGrenadian Creole English \tCreole English, Grenadian",
						"gpe \tGhanaian Pidgin English \tPidgin English, Ghanaian",
						"gul \tSea Island Creole English \tCreole English, Sea Island",
						"gyn \tGuyanese Creole English \tCreole English, Guyanese",
						"hwc \tHawai'i Creole English \tCreole English, Hawai'i",
						"icr \tIslander Creole English \tCreole English, Islander",
						"jam \tJamaican Creole English \tCreole English, Jamaican",
						"lir \tLiberian English \tEnglish, Liberian",
						"svc \tVincentian Creole English \tCreole English, Vincentian",
						"tch \tTurks And Caicos Creole English \tCreole English, Turks And Caicos",
						"tgh \tTobagonian Creole English \tCreole English, Tobagonian",
						"trf \tTrinidadian Creole English \tCreole English, Trinidadian",
						"vic \tVirgin Islands Creole English \tCreole English, Virgin Islands"
					],
					"french": [
						"acf \tSaint Lucian Creole French \tCreole French, Saint Lucian",
						"crs \tSeselwa Creole French \tCreole French, Seselwa",
						"fra \tFrench \tFrench",
						"frc \tCajun French \tFrench, Cajun",
						"frm \tMiddle French (ca. 1400-1600) \tFrench, Middle (ca. 1400-1600)",
						"fro \tOld French (842-ca. 1400) \tFrench, Old (842-ca. 1400)",
						"fsl \tFrench Sign Language \tFrench Sign Language",
						"gcf \tGuadeloupean Creole French \tCreole French, Guadeloupean",
						"gcr \tGuianese Creole French \tCreole French, Guianese",
						"kmv \tKaripúna Creole French \tCreole French, Karipúna",
						"lou \tLouisiana Creole French \tCreole French, Louisiana",
						"rcf \tRéunion Creole French \tCreole French, Réunion",
						"scf \tSan Miguel Creole French \tCreole French, San Miguel",
						"sfb \tFrench Belgian Sign Language \tFrench Belgian Sign Language",
						"ssr \tSwiss-French Sign Language \tSwiss-French Sign Language"
					],
					"russian": [
						"orv \tOld Russian \tRussian, Old",
						"rsl \tRussian Sign Language \tRussian Sign Language",
						"rus \tRussian \tRussian"
					],
					"german": [
						"deu \tGerman \tGerman",
						"gct \tColonia Tovar German \tGerman, Colonia Tovar",
						"geh \tHutterite German \tGerman, Hutterite",
						"gmh \tMiddle High German (ca. 1050-1500) \tGerman, Middle High (ca. 1050-1500)",
						"gml \tMiddle Low German \tGerman, Middle Low",
						"goh \tOld High German (ca. 750-1050) \tGerman, Old High (ca. 750-1050)",
						"gsg \tGerman Sign Language \tGerman Sign Language",
						"gsw \tSwiss German \tGerman, Swiss",
						"nds \tLow German \tGerman, Low",
						"pdc \tPennsylvania German \tGerman, Pennsylvania",
						"sgg \tSwiss-German Sign Language \tSwiss-German Sign Language"
					],
					"italian": [
						"ise \tItalian Sign Language \tItalian Sign Language",
						"ita \tItalian \tItalian",
						"itk \tJudeo-Italian \tJudeo-Italian",
						"slf \tSwiss-Italian Sign Language \tSwiss-Italian Sign Language"
					],
					"polish": [
						"pol \tPolish \tPolish",
						"pso \tPolish Sign Language \tPolish Sign Language"
					],
					"yiddish": [
						"ydd \tEastern Yiddish \tYiddish, Eastern",
						"yid \tYiddish \tYiddish",
						"yih \tWestern Yiddish \tYiddish, Western"
					],
					"latin": [
						"lat \tLatin \tLatin"
					],
					"greek": [
						"cpg \tCappadocian Greek \tGreek, Cappadocian",
						"ell \tModern Greek (1453-) \tGreek, Modern (1453-)",
						"gmy \tMycenaean Greek \tGreek, Mycenaean",
						"grc \tAncient Greek (to 1453) \tGreek, Ancient (to 1453)",
						"gss \tGreek Sign Language \tGreek Sign Language",
						"rge \tRomano-Greek \tRomano-Greek"
					],
					"norse": [
						"non \tOld Norse \tNorse, Old"
					]
				},
				"subNamespaces": {
					"foreign": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"english": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"german": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"russian": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"italian": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"polish": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"yiddish": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"french": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"latin": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"greek": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					},
					"norse": {
						"item.iterateType": 3,
						"item.countType": 4,
						"skipWordsOutOfCount": false,
						"skipSmallParagraphs": false,
						"examples.store": true
					}
				}
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data"
						}
					]
				},
				"etymology": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "dictionary.etymology.wiktionary",
							"name": "deep-partial"
						}
					]
				},
				"inout": {
					"direction": "inout",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.stats",
							"name": "results"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>",
			"name": "distribution",
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>",
			"name": "distribution",
			"comment": "Distribution of lemmas in the corpus",
			"processorNsN": "distributions.NGramOccurrenceFrequency.NGramOccurrenceFrequency",
			"execution": 0,
			"params": {
				"isPopulationSet": true,
				"populationSetIndex": "words",
				"sortBy": "occurrence",
				"nGramLengths": [1],
				"isItemSet": true,
				"itemSetIndex": 2,
				"multiItemsSeparator": ","
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data"
						}
					]
				},
				"inout": {
					"direction": "inout",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "distribution"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>",
			"name": "distribution-out",
			"paramsProcess": {
				"fileOut.name":  "E"
			},
			"params": {
				"fileOut.name": "<FOLDER_OUT>/<SUB_PROJECT_NAME> - lemma-distribution",
				"fileOut.type": ["csv", "html"],
				"limitsType": "frequency",
				"limitMax": 1.0,
				"limitMin": 0
			},
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>",
			"name": "distribution-out",
			"comment": "Exporting distributions of uni-grams for lemmas in the corpus",
			"processorNsN": "distributions.DistributionExport.DistributionExport",
			"execution": 0,
			"params": {
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "distribution"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "distribution-out"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "distribution",
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "distribution",
			"comment": "Distribution of uni-grams, bi-grams, & tri-grams of POS tags in the corpus",
			"processorNsN": "distributions.NGramOccurrenceFrequency.NGramOccurrenceFrequency",
			"execution": 0,
			"params": {
				"isPopulationSet": true,
				"populationSetIndex": "words",
				"sortBy": "occurrence",
				"nGramLengths": [1, 2, 3],
				"isItemSet": true,
				"itemSetIndex": 1,
				"multiItemsSeparator": ","
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data"
						}
					]
				},
				"inout": {
					"direction": "inout",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "distribution"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "distribution-out",
			"paramsProcess": {
				"fileOut.name":  "E"
			},
			"params": {
				"fileOut.name": "<FOLDER_OUT>/<SUB_PROJECT_NAME> - pos-distribution",
				"fileOut.type": ["csv", "html"],
				"limitsType": "frequency",
				"limitMax": 1.0,
				"limitMin": 0
			},
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.pos",
			"name": "distribution-out",
			"comment": "Exporting distributions of uni-grams, bi-grams, & tri-grams of POS tags in Lolota",
			"processorNsN": "distributions.DistributionExport.DistributionExport",
			"execution": 0,
			"params": {
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "distribution"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "distribution-out"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "search-patterns",
			"data": {
				"many-adjectives": ["{JJ*} {JJ*} {JJ*} {NN*}", "{JJ*} {JJ*} {NN*}"],
				"many-adverbs": ["{RB*} {RB*} {RB*} {NN*}", "{RB*} {RB*} {VB*}"]
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "search-results",
			"data": {},
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.pos",
			"name": "searching-pos",
			"comment": "Searching for occurrences of POS patterns in the corpus' word and POS paragraphs and producing pattern matched results and statistics",
			"processorNsN": "pos.TagsSearch.TagsSearch",
			"execution": 3,
			"params": {
				"item.countType": 3,
				"examples.store": true,
				"examples.storeNo": true,
				"examples.ShowNum": 25,
				"skipSmallParagraphs": true
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>",
							"name": "parsed"
						},
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data"
						},
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "search-patterns"
						}
					]
				},
				"inout": {
					"direction": "inout",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "search-results"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "search-results-export",
			"paramsProcess": {
				"fileOut.name":  "E",
				"fileOutExamples.name":  "E"
			},
			"params": {
				"fileOut.name": "<FOLDER_OUT>/<SUB_PROJECT_NAME> - pos-results.csv",
				"fileOut.type": "csv",
				"fileOut.encoding": "utf-8",
				"fileOutExamples.name": "<FOLDER_OUT>/<SUB_PROJECT_NAME> - pos-results-examples.html",
				"fileOutExamples.type": "html",
				"fileOutExamples.encoding": "utf-8"
			},
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.pos",
			"name": "exporting-pos-patterns",
			"comment": "Exporting occurrences of POS patterns in the corpus",
			"processorNsN": "pos.TagsExport.TagsExport",
			"execution": 3,
			"paramsProcess": {
				"export.distributionNames":  "E"
			},
			"params": {
				"export.distributionNames": ["<NAMESPACE_DATA>"]
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "search-results"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "search-results-export"
						}
					]
				}
			}
		},
		{
			"type": "dataset",
			"namespace": "<NAMESPACE_DATA>.pos",
			"name": "html",
			"paramsProcess": {
				"fileOut.name":  "E"
			},
			"params": {
				"fileOut.name": "<FOLDER_OUT>/<SUB_PROJECT_NAME> - pos.html",
				"fileOut.type": "html",
				"fileOut.encoding": "utf-8"
			},
			"shouldInvalidate": true
		},
		{
			"type": "task",
			"namespace": "<NAMESPACE_TASK>.pos",
			"name": "exporting-pos-document",
			"comment": "Exporting POS representation",
			"processorNsN": "exporters.ExporterPosAnnotatedHtml.ExporterPosAnnotatedHtml",
			"execution": 0,
			"params": {
				"sentencesColors": [["#333333", "#3333FF"], ["#333333", "#33FF33"]],
				"partOfDocument": 0.1,
				"numberOfWordsInChunk": 100,
				"sentaceBreak": true,
				"paragraphBreak": true,
				"chunkBreak": true
			},
			"ports": {
				"in": {
					"direction": "in",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "data"
						}
					]
				},
				"out": {
					"direction": "out",
					"datasets": [
						{
							"namespace": "<NAMESPACE_DATA>.pos",
							"name": "html"
						}
					]
				}
			}
		}
	]
}
